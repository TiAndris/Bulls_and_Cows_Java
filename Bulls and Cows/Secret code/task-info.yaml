type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;

    public class Main {
        public static void main(String[] args) {
            new Game().execute();
        }
    }
  learner_created: false
- name: src/bullscows/Game.java
  visible: true
  text: |-
    package bullscows;

    import java.util.Arrays;
    import java.util.Random;
    import java.util.Scanner;

    public class Game {
        private final Code code = new Code("9305");
        private final Scanner sc = new Scanner(System.in);

        public void execute() {
            Grade grade = new Grade();
            grade = code.check(new Code(generateRandom()));
            System.out.println(grade + " The secret code is 9305.");
            //System.out.println("The secret code is prepared: ****.\n");
    //        int count = 1;
    //        while (!grade.isSolved() && count < 10) {
    //            System.out.println("Turn " + count + ". Answer:");
    //            grade = code.check(new Code(generateRandom()));
    //            System.out.println(grade + "\n");
    //            count++;
    //        }
    //        if (grade.isSolved())
    //            System.out.println("Congrats!");
    //        System.out.println("The secret code is " + code + ".");
        }

        private String generateRandom() {
            Random random = new Random();
            StringBuilder code = new StringBuilder();
            for (int i = 0; i < 4; i++) {
                int a = random.nextInt(10);
                code.append(a);
            }
            System.out.println(code.toString());
            return code.toString();
        }
    }
  learner_created: false
- name: src/bullscows/Code.java
  visible: true
  text: |-
    package bullscows;

    public class Code {
        private static final int CODE_LENGTH = 4;
        private final String string;

        public Code(String string) {
            this.string = string;
        }

        public String getString() {
            return string;
        }

        public Grade check(Code code) {
            if (this.string.equals(code.string)) {
                return new Grade(4, 0);
            }
            Grade grade = new Grade();
            String temp = this.string;
            for (int i = 0; i < CODE_LENGTH; i++) {
                char ch1 = string.charAt(i);
                char ch2 = code.string.charAt(i);
                if (ch1 == ch2) {
                    grade.addBull();
                    continue;
                }
                String s = String.valueOf(ch2);
                if (temp.contains(s)) {
                    temp = temp.replace(s, "");
                    grade.addCow();
                }
            }
            return grade;
        }

        @Override
        public String toString() {
            return string;
        }
    }
  learner_created: false
- name: src/bullscows/Grade.java
  visible: true
  text: |-
    package bullscows;

    public class Grade {
        private int bulls;
        private int cows;

        public Grade(int bulls, int cows) {
            this.bulls = bulls;
            this.cows = cows;
        }

        public Grade() {
            this.bulls = 0;
            this.cows = 0;
        }

        public int getBulls() {
            return bulls;
        }

        public void setBulls(int bulls) {
            this.bulls = bulls;
        }

        public int getCows() {
            return cows;
        }

        public void setCows(int cows) {
            this.cows = cows;
        }

        public void addBull() {
            bulls++;
        }

        public void addCow() {
            cows++;
        }

        public boolean isSolved() {
            return bulls == 4;
        }

        @Override
        public String toString() {
            String text = "Grade: ";
            if (bulls > 0 && cows > 0) {
                return text + bulls + (bulls == 1 ? " bull" : " bulls") + " and "
                        + cows + (cows == 1 ? " cow." : " cows.");
            }
            if (bulls > 0) {
                return text + bulls + (bulls == 1 ? " bull" : " bulls") + ".";
            }
            if (cows > 0) {
                return text + cows + (cows == 1 ? " cow." : " cows.");
            }
            return text + "None.";
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedHashSet;
    import java.util.List;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    public class BullsCowsTest extends StageTest<String> {

        // basic test case
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4").toLowerCase().trim();

            return outputCheck(output, 4);
        }

        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("1").toLowerCase().trim();

            return outputCheck(output, 1);
        }

        // test of incorrect input
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11").toLowerCase().trim();

            return outputCheck(output, 11);
        }

        @DynamicTestingMethod
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6").toLowerCase().trim();

            return outputCheck(output, 6);
        }

        @DynamicTestingMethod
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("3").toLowerCase().trim();

            return outputCheck(output, 3);
        }


        CheckResult outputCheck(String source, int length) {

            if (length > 10) {
                if (source.toLowerCase().contains("error")) {
                    return CheckResult.correct();
                } else {
                    return CheckResult.wrong("An error message expected with input " +
                            "\"" + length + "\"");
                }
            }

            List<Integer> integers = expect(source).toContain(1).integers();
            source = "" + integers.get(0);

            if (source.length() != length) {
                return CheckResult.wrong("The output number of your program has " +
                        "an incorrect length (found " + source.length() + ")");
            }

            List<Integer> temp = stringToArrayOfNumbers(source);
            temp = new ArrayList<>(new LinkedHashSet<>(temp));

            if (temp.toArray().length != source.length()) {
                return CheckResult.wrong("Digits in the generated number are not unique.");
            }

            return CheckResult.correct();
        }

        private static List<Integer> stringToArrayOfNumbers(String array) {
            return Arrays.stream(array.split(""))
                    .map(Integer::parseInt)
                    .collect(Collectors.toList());
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5431#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 11 Jul 2023 14:29:26 UTC"
record: 3
